type: recipe
format_version: 1
maintainers: [dorotat]
loggers: [tensorboard, dllogger, extra]
labels:
  origin: bionemo
  workload_ref: ""
  bionemo_ci_pipeline_id: ""
  bionemo_commit_sha: ""
key_segments:
  domain: domain
  config_name: config
  warmup: warmup
  default_overwrites: False
  extra_overwrites: False
  seed: seed
  max_steps: msteps
  val_check_interval: valcheck
launchers:
  type:slurm:
    ntasks_per_node: '{gpus}'
  name:dgxa100_dracooci:
    mounts:
      /workspace/bionemo/data : /lustre/fsw/portfolios/healthcareeng/projects/healthcareeng_bionemo/jet/data
spec:
  build: bionemo
  scope: ""
  BIONEMO_HOME: "/workspace/bionemo"
  platforms: [linux/amd64]
  wandb_project_name: ""
  wandb_run_link: ""
  pipeline_label: ""
  warmup: 200
  default_overwrites: "++exp_manager.create_tensorboard_logger=True ++exp_manager.wandb_logger_kwargs.offline=False ++exp_manager.create_wandb_logger=True ++exp_manager.create_checkpoint_callback=False ++exp_manager.resume_if_exists=False"
  extra_overwrites: ""
  script: |-
    cd {BIONEMO_HOME};
    mkdir -p {tensorboard_dir};
    export WANDB_API_KEY=$BIONEMO_WANDB_API_KEY;
    model_tag={model}_{variant}_{config_name};
    python examples/{domain}/{model}/{variant}.py --config-name {config_name} \
    trainer.num_nodes={nodes} trainer.devices={gpus} trainer.precision={precision} model.micro_batch_size={batch_size} \
    trainer.val_check_interval={val_check_interval} ++model.seed={seed} trainer.max_steps={max_steps} \
    ++exp_manager.exp_dir={tensorboard_dir} \
    ++model.data.index_mapping_dir={BIONEMO_HOME}/data/index_dir/{config_name} \
    {default_overwrites} {extra_overwrites}  \
    ++exp_manager.wandb_logger_kwargs.project={wandb_project_name} \
    ++exp_manager.wandb_logger_kwargs.group=${{model_tag}} \
    ++exp_manager.wandb_logger_kwargs.job_type={pipeline_label} \
    ++exp_manager.wandb_logger_kwargs.name=${{model_tag}}__{precision}prec_{batch_size}bs_{nodes}node_{gpus}gpu_{max_steps}s_{val_check_interval}valcheck \
    ++create_dllogger_callbacks=True ++create_trainer_metric_callback=True \
    ++dllogger_callbacks_kwargs.use_existing_dllogger=True ++dllogger_callbacks_kwargs.warmup={warmup} \
    ++dllogger_callbacks_kwargs.json_file={dllogger_file} ++trainer_metric_callback_kwargs.log_path={assets_dir} \
    ++logs_dir={logs_dir};
  time_limit: 14400
  artifacts: {}
metrics:
  reduced_train_loss:
    goal: minimize
    tags: [accuracy]
    key: primary
  val_loss:
    goal: minimize
    tags: [ accuracy ]
    key: secondary
products:
  - nodes: [1]
    gpus: [1]
    precision: [bf16-mixed]
    products:
      - domain: [dna]
        products:
          - variant: [pretrain]
            model: [dnabert]
            config_name: [dnabert_config]
            batch_size: [128]
            max_steps: [16000]
            seed: [1234]
            val_check_interval: [5000]
tests_spec:
  - logic_type: static
    logic_spec:
      exit_codes:
        - 0
      baselines:
        reduced_train_loss:
          # primary, showed zero variance with fixed seed.
          operator: range
          max: 1.88
          min: 1.83  # sanity check
        consumed_samples:
          # primary (this should be exact)
          operator: eq
          value: 2048000.0 # 64*1*1*20000=1024000
        val_loss:
          # primary, showed some variance with fixed seed.
          operator: range
          max: 1.9
          min: 1.84
        grad_norm:
          # primary
          operator: range
          max: 0.8
          min: 0.0
